{"version":3,"sources":["webpack:///./src/utils/index.js","webpack:///src/pages/homepage/topology.vue","webpack:///./src/pages/homepage/topology.vue?ad87","webpack:///./src/pages/homepage/topology.vue","webpack:///./node_modules/_mxgraph@4.0.5@mxgraph/javascript/dist/build.js"],"names":["mxgraph","mx","mxImageBasePath","mxBasePath","window","mxGraph","mxGraphModel","mxEditor","mxGeometry","mxDefaultKeyHandler","mxDefaultPopupMenu","mxStylesheet","mxDefaultToolbar","topology","name","data","value","methods","save","this","$refs","validate","valid","model","console","log","init","mounted","graph","graph_container","parent","getDefaultParent","getModel","beginUpdate","v1","insertVertex","v2","insertEdge","endUpdate","homepage_topology","render","_vm","_h","$createElement","_c","_self","staticClass","ref","staticStyle","margin","attrs","onload","position","white-space","overflow","top","left","max-height","height","right","padding","background-image","id","_v","vertical","callback","$$v","expression","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","opts","__mxOutput","mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","IS_IOS","IS_GC","IS_CHROMEAPP","chrome","app","runtime","IS_FF","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","appVersion","IS_MAC","IS_CHROMEOS","test","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","write","setAttribute","getElementsByTagName","appendChild","loadResources","fn","lan","pending","length","i","mxResources","add","include","src","node","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","substring","basePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","type","styleSheet","cssText","createStyleSheet","module","exports","undefined","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","body","title","table","tbody","tr","td","style","verticalAlign","textarea","resize","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","toString","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","parseInt","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","changes","done","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","hasScrollbars","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","idx2","ltrim","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","getChildNodes","importNode","allChildren","newNode","attributes","createTextNode","createXmlDocument","implementation","createDocument","ActiveXObject","parseXml","DOMParser","xml","parseFromString","async","validateOnParse","resolveExternals","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","getPrettyXml","tab","indent","NODETYPE_TEXT","getTextContent","htmlEntities","val","removeWhitespace","before","previousSibling","next","s","newline","String","isVml","tagUrn","getXml","linefeed","XMLSerializer","serializeToString","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","nodeValue","replaceTrailingNewlines","pattern","postfix","innerText","textContent","setTextContent","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","p","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","offsetTop","bottom","url","mxXmlRequest","send","onerror","binary","timeout","ontimeout","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","x1","denom","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","stylename","getStylenames","pairs","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","setStyle","getStyle","isValue","setCellStyleFlags","flag","setStyleFlag","sep","cont","getAlignmentAsPoint","align","valign","ALIGN_CENTER","ALIGN_RIGHT","ALIGN_MIDDLE","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","display","zoom","whiteSpace","size","getViewXml","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_CDATA","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_COMMENT","NODETYPE_DOCUMENT","NODETYPE_DOCUMENTTYPE","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","FONT_BOLD","FONT_ITALIC","FONT_UNDERLINE","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_LEFT","ALIGN_TOP","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","event","delta","detail","wheelDelta","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","touches","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","buttons","which","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","ctrlKey","metaKey","getMainEvent","changedTouches","clientX","clientY","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","request","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","onreadystatechaange","setRequestHeaders","setRequestHeader","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","previewOffset","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","paint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","fontStyle","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","blockImagePointerEvents","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","createAlternateContent","fo","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","lh","css","invalidateCachedOffsetSize","mxCachedOffsetWidth","mxCachedFinalOffsetWidth","mxCachedFinalOffsetHeight","updateText","group","maxHeight","maxWidth","ow","oh","sizeDiv","padX","padY","wordWrap","ws","div2","padDx","plainText","createClip","updateFont","anchor","textHeight","addTextBackground","bbox","getBBox","ie","fontWeight","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","box","inner","rot","real_cos","real_sin","top_fix","left_fix","divParent","textpathok","v","tp","on","horizontal","guideX","guideY","rounded","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","trx","overrideX","stateX","valueX","overrideY","stateY","valueY","tt","ttX","ttY","middle","snapX","override","getOverlayPane","snapY","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bg","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","p0","slice","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","unscaledWidth","lastUnscaledWidth","realHtml","fmt","getAutoDirection","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","updateInnerHtml","divs","unrotatedBoundingBox","updateValue","bd","enableWrap","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","getConstraint","getCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","dx0","dy0","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","g","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","findParallels","parallels","getEdgeId","trg","route","scx","scy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","connectedEdgeGroupCount","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","diff","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","dummyVertexWidth","dummyVertices","getChildCells","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","xout","yout","pow","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","pi2","mxPrintPreview","pageSelector","pageScale","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","previousContainer","getCanvas","backgroundPane","getBackgroundPane","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCell","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","uline","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","tolerance","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","dh","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","hints","lastPushed","hint","pushPoint","lastInx","newHints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","scaledSourceBuffer","scaledTargetBuffer","totalBuffer","tooShort","newRect","portConstraint","sourceCenX","sourceCenY","targetCenX","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","deltaX","deltaY","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","cellsResized","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","updatePreview","updateHint","escapeHandler","refreshHandler","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","maxScale","zoomTo","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","handler","escape","hideProperties","config","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","keyHandler","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","isOrthogonal","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","getPerimeterFunction","opposite","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","selectCellForEvent","swimlane","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","resizeCell","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","cw","ch","sh","scrollRectToVisible","zoomToRect","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isCloneEvent","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","isCellsCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","ignoreFn","hitsSwimlaneContent","getPointForEvent","addOffset","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","suspended","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","hit","allowHandleBoundsCheck","getTranslateForEvent","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","getLayout","getCellsForChanges","executeLayoutForCells","sorted","reverse","layoutCells","getCellsForChange","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","currentDx","currentDy","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","isCloneEnabled","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","isDelayedSelection","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cloning","cellCount","addStates","ignore","isCellMoving","useGuidesForEvent","vector","roundLength","removeHint","livePreviewActive","setHighlightColor","resetLivePreview","remote","updateLivePreview","updatePreviewShape","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","setHandlesVisible","selectDelayed","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","ignoreGrid","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","preview","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveLabel","rotateVertex","resizeVertex","currentAlpha","atan","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","crs","da","getRotationHandlePosition","updateParentHighlight","parentHighlight","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","enc","into","dec","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","object","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec"],"mappings":"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","file":"static/js/3.09108a5e4b48a72150be.js","sourcesContent":["import mx from 'mxgraph';\r\nconst mxgraph = mx({\r\n    mxImageBasePath: './src/images',\r\n    mxBasePath: './src'\r\n});\r\n// decode bug https://github.com/jgraph/mxgraph/issues/49\r\nwindow.mxGraph = mxgraph.mxGraph;\r\nwindow.mxGraphModel = mxgraph.mxGraphModel;\r\nwindow.mxEditor = mxgraph.mxEditor;\r\nwindow.mxGeometry = mxgraph.mxGeometry;\r\nwindow.mxDefaultKeyHandler = mxgraph.mxDefaultKeyHandler;\r\nwindow.mxDefaultPopupMenu = mxgraph.mxDefaultPopupMenu;\r\nwindow.mxStylesheet = mxgraph.mxStylesheet;\r\nwindow.mxDefaultToolbar = mxgraph.mxDefaultToolbar;\r\n\r\nexport default mxgraph;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/index.js","<template>\r\n    <div class=\"hello\">\r\n\r\n        <div onload=\"main(document.getElementById('graphContainer'),\r\n\t\t\tdocument.getElementById('outlineContainer'),\r\n\t\t \tdocument.getElementById('toolbarContainer'),\r\n\t\t\tdocument.getElementById('sidebarContainer'),\r\n            document.getElementById('statusContainer'));\" style=\"margin:0px;\" class=\"grf\" ref=\"graph_container\">\r\n\r\n            <!-- Creates a container for the splash screen -->\r\n            <!-- <div id=\"splash\"\r\n                style=\"position:absolute;top:0px;left:0px;width:100%;height:100%;background:white;z-index:1;\">\r\n                <center id=\"splash\" style=\"padding-top:230px;\">\r\n                    <img src=\"editors/images/loading.gif\">\r\n                </center>\r\n            </div> -->\r\n\r\n            <!-- Creates a container for the sidebar -->\r\n            <div id=\"toolbarContainer\"\r\n                style=\"position:absolute;white-space:nowrap;overflow:hidden;top:0px;left:0px;max-height:24px;height:36px;right:0px;padding:6px;background-image:url('images/toolbar_bg.gif');\">\r\n            </div>\r\n\r\n            <!-- Creates a container for the toolboox -->\r\n            <!-- <div id=\"sidebarContainer\"\r\n                style=\"position:absolute;overflow:hidden;top:36px;left:0px;bottom:36px;max-width:52px;width:56px;padding-top:10px;padding-left:4px;background-image:url('images/sidebar_bg.gif');\">\r\n            </div> -->\r\n\r\n            <!-- Creates a container for the graph -->\r\n            <!-- <div id=\"graphContainer\"\r\n                style=\"position:absolute;overflow:hidden;top:36px;left:60px;bottom:36px;right:0px;background-image:url('editors/images/grid.gif');cursor:default;\">\r\n            </div> -->\r\n\r\n            <!-- Creates a container for the outline -->\r\n            <!-- <div id=\"outlineContainer\"\r\n                style=\"position:absolute;overflow:hidden;top:36px;right:0px;width:200px;height:140px;background:transparent;border-style:solid;border-color:black;\">\r\n            </div> -->\r\n\r\n            <!-- Creates a container for the sidebar -->\r\n            <!-- <div id=\"statusContainer\"\r\n                style=\"text-align:right;position:absolute;overflow:hidden;bottom:0px;left:0px;max-height:24px;height:36px;right:0px;color:white;padding:6px;background-image:url('images/toolbar_bg.gif');\">\r\n                <div style=\"font-size:10pt;float:left;\">\r\n                    Created with <a href=\"http://www.jgraph.com\" target=\"_blank\">mxGraph</a>\r\n                </div>\r\n            </div> -->\r\n        </div>\r\n\r\n\r\n        <template>\r\n            <div class=\"block\">\r\n                <el-slider v-model=\"value\" vertical height=\"200px\"> </el-slider>\r\n            </div>\r\n        </template>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import mxgraph from '../../utils/index.js';\r\n    // const { mxGraph, mxClient, mxCodec, mxUtils, mxConstants, mxPerimeter } = mxgraph;\r\n    export default {\r\n        name: 'HelloWorld',\r\n        data() {\r\n            return {\r\n                value: 50\r\n            }\r\n        },\r\n        methods: {\r\n            save() {\r\n                this.$refs[\"form\"].validate((valid, model) => {\r\n                    console.log(valid);\r\n                    console.log(model);\r\n                })\r\n            },\r\n            init() {\r\n\r\n                function main(container, outline, toolbar, sidebar, status) {\r\n                    // Checks if the browser is supported\r\n                    if (!mxClient.isBrowserSupported()) {\r\n                        // Displays an error message if the browser is not supported.\r\n                        mxUtils.error('Browser is not supported!', 200, false);\r\n                    }\r\n                    else {\r\n                        // Assigns some global constants for general behaviour, eg. minimum\r\n                        // size (in pixels) of the active region for triggering creation of\r\n                        // new connections, the portion (100%) of the cell area to be used\r\n                        // for triggering new connections, as well as some fading options for\r\n                        // windows and the rubberband selection.\r\n                        mxConstants.MIN_HOTSPOT_SIZE = 16;\r\n                        mxConstants.DEFAULT_HOTSPOT = 1;\r\n\r\n                        // Enables guides\r\n                        mxGraphHandler.prototype.guidesEnabled = true;\r\n                        // Alt disables guides\r\n                        mxGuide.prototype.isEnabledForEvent = function (evt) {\r\n                            return !mxEvent.isAltDown(evt);\r\n                        };\r\n                        // Enables snapping waypoints to terminals\r\n                        mxEdgeHandler.prototype.snapToTerminals = true;\r\n                        // Workaround for Internet Explorer ignoring certain CSS directives\r\n                        if (mxClient.IS_QUIRKS) {\r\n                            document.body.style.overflow = 'hidden';\r\n                            new mxDivResizer(container);\r\n                            new mxDivResizer(outline);\r\n                            new mxDivResizer(toolbar);\r\n                            new mxDivResizer(sidebar);\r\n                            new mxDivResizer(status);\r\n                        }\r\n\r\n                        // Creates a wrapper editor with a graph inside the given container.\r\n                        // The editor is used to create certain functionality for the\r\n                        // graph, such as the rubberband selection, but most parts\r\n                        // of the UI are custom in this example.\r\n                        var editor = new mxEditor();\r\n                        var graph = editor.graph;\r\n                        var model = graph.getModel();\r\n                        // Disable highlight of cells when dragging from toolbar\r\n                        graph.setDropEnabled(false);\r\n                        // Uses the port icon while connections are previewed\r\n                        graph.connectionHandler.getConnectImage = function (state) {\r\n                            return new mxImage(state.style[mxConstants.STYLE_IMAGE], 16, 16);\r\n                        };\r\n                        // Centers the port icon on the target port\r\n                        graph.connectionHandler.targetConnectImage = true;\r\n                        // Does not allow dangling edges\r\n                        graph.setAllowDanglingEdges(false);\r\n                        // Sets the graph container and configures the editor\r\n                        editor.setGraphContainer(container);\r\n                        var config = mxUtils.load(\r\n                            'editors/config/keyhandler-commons.xml').\r\n                            getDocumentElement();\r\n                        editor.configure(config);\r\n\r\n                        // Defines the default group to be used for grouping. The\r\n                        // default group is a field in the mxEditor instance that\r\n                        // is supposed to be a cell which is cloned for new cells.\r\n                        // The groupBorderSize is used to define the spacing between\r\n                        // the children of a group and the group bounds.\r\n                        var group = new mxCell('Group', new mxGeometry(), 'group');\r\n                        group.setVertex(true);\r\n                        group.setConnectable(false);\r\n                        editor.defaultGroup = group;\r\n                        editor.groupBorderSize = 20;\r\n                        // Disables drag-and-drop into non-swimlanes.\r\n                        graph.isValidDropTarget = function (cell, cells, evt) {\r\n                            return this.isSwimlane(cell);\r\n                        };\r\n\r\n                        // Disables drilling into non-swimlanes.\r\n                        graph.isValidRoot = function (cell) {\r\n                            return this.isValidDropTarget(cell);\r\n                        }\r\n                        // Does not allow selection of locked cells\r\n                        graph.isCellSelectable = function (cell) {\r\n                            return !this.isCellLocked(cell);\r\n                        };\r\n                        // Returns a shorter label if the cell is collapsed and no\r\n                        // label for expanded groups\r\n                        graph.getLabel = function (cell) {\r\n                            var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\r\n\r\n                            if (this.isCellLocked(cell)) {\r\n                                // Returns an empty label but makes sure an HTML\r\n                                // element is created for the label (for event\r\n                                // processing wrt the parent label)\r\n                                return '';\r\n                            }\r\n                            else if (this.isCellCollapsed(cell)) {\r\n                                var index = tmp.indexOf('</h1>');\r\n\r\n                                if (index > 0) {\r\n                                    tmp = tmp.substring(0, index + 5);\r\n                                }\r\n                            }\r\n\r\n                            return tmp;\r\n                        }\r\n                        // Disables HTML labels for swimlanes to avoid conflict\r\n                        // for the event processing on the child cells. HTML\r\n                        // labels consume events before underlying cells get the\r\n                        // chance to process those events.\r\n                        //\r\n                        // NOTE: Use of HTML labels is only recommended if the specific\r\n                        // features of such labels are required, such as special label\r\n                        // styles or interactive form fields. Otherwise non-HTML labels\r\n                        // should be used by not overidding the following function.\r\n                        // See also: configureStylesheet.\r\n                        graph.isHtmlLabel = function (cell) {\r\n                            return !this.isSwimlane(cell);\r\n                        }\r\n                        // To disable the folding icon, use the following code:\r\n                        /*graph.isCellFoldable = function(cell)\r\n                        {\r\n                            return false;\r\n                        }*/\r\n                        // Shows a \"modal\" window when double clicking a vertex.\r\n                        graph.dblClick = function (evt, cell) {\r\n                            // Do not fire a DOUBLE_CLICK event here as mxEditor will\r\n                            // consume the event and start the in-place editor.\r\n                            if (this.isEnabled() &&\r\n                                !mxEvent.isConsumed(evt) &&\r\n                                cell != null &&\r\n                                this.isCellEditable(cell)) {\r\n                                if (this.model.isEdge(cell) ||\r\n                                    !this.isHtmlLabel(cell)) {\r\n                                    this.startEditingAtCell(cell);\r\n                                }\r\n                                else {\r\n                                    var content = document.createElement('div');\r\n                                    content.innerHTML = this.convertValueToString(cell);\r\n                                    showModalWindow(this, 'Properties', content, 400, 300);\r\n                                }\r\n                            }\r\n                            // Disables any default behaviour for the double click\r\n                            mxEvent.consume(evt);\r\n                        };\r\n                        // Enables new connections\r\n                        graph.setConnectable(true);\r\n                        // Adds all required styles to the graph (see below)\r\n                        configureStylesheet(graph);\r\n                        // Adds sidebar icons.\r\n                        //\r\n                        // NOTE: For non-HTML labels a simple string as the third argument\r\n                        // and the alternative style as shown in configureStylesheet should\r\n                        // be used. For example, the first call to addSidebar icon would\r\n                        // be as follows:\r\n                        // addSidebarIcon(graph, sidebar, 'Website', 'images/icons48/earth.png');\r\n                        addSidebarIcon(graph, sidebar,\r\n                            '<h1 style=\"margin:0px;\">Website</h1><br>' +\r\n                            '<img src=\"images/icons48/earth.png\" width=\"48\" height=\"48\">' +\r\n                            '<br>' +\r\n                            '<a href=\"http://www.jgraph.com\" target=\"_blank\">Browse</a>',\r\n                            'images/icons48/earth.png');\r\n                        addSidebarIcon(graph, sidebar,\r\n                            '<h1 style=\"margin:0px;\">Process</h1><br>' +\r\n                            '<img src=\"images/icons48/gear.png\" width=\"48\" height=\"48\">' +\r\n                            '<br><select><option>Value1</option><option>Value2</option></select><br>',\r\n                            'images/icons48/gear.png');\r\n                        addSidebarIcon(graph, sidebar,\r\n                            '<h1 style=\"margin:0px;\">Keys</h1><br>' +\r\n                            '<img src=\"images/icons48/keys.png\" width=\"48\" height=\"48\">' +\r\n                            '<br>' +\r\n                            '<button onclick=\"mxUtils.alert(\\'generate\\');\">Generate</button>',\r\n                            'images/icons48/keys.png');\r\n                        addSidebarIcon(graph, sidebar,\r\n                            '<h1 style=\"margin:0px;\">New Mail</h1><br>' +\r\n                            '<img src=\"images/icons48/mail_new.png\" width=\"48\" height=\"48\">' +\r\n                            '<br><input type=\"checkbox\"/>CC Archive',\r\n                            'images/icons48/mail_new.png');\r\n                        addSidebarIcon(graph, sidebar,\r\n                            '<h1 style=\"margin:0px;\">Server</h1><br>' +\r\n                            '<img src=\"images/icons48/server.png\" width=\"48\" height=\"48\">' +\r\n                            '<br>' +\r\n                            '<input type=\"text\" size=\"12\" value=\"127.0.0.1\"/>',\r\n                            'images/icons48/server.png');\r\n                        // Displays useful hints in a small semi-transparent box.\r\n                        var hints = document.createElement('div');\r\n                        hints.style.position = 'absolute';\r\n                        hints.style.overflow = 'hidden';\r\n                        hints.style.width = '230px';\r\n                        hints.style.bottom = '56px';\r\n                        hints.style.height = '76px';\r\n                        hints.style.right = '20px';\r\n\r\n                        hints.style.background = 'black';\r\n                        hints.style.color = 'white';\r\n                        hints.style.fontFamily = 'Arial';\r\n                        hints.style.fontSize = '10px';\r\n                        hints.style.padding = '4px';\r\n                        mxUtils.setOpacity(hints, 50);\r\n\r\n                        mxUtils.writeln(hints, '- Drag an image from the sidebar to the graph');\r\n                        mxUtils.writeln(hints, '- Doubleclick on a vertex or edge to edit');\r\n                        mxUtils.writeln(hints, '- Shift- or Rightclick and drag for panning');\r\n                        mxUtils.writeln(hints, '- Move the mouse over a cell to see a tooltip');\r\n                        mxUtils.writeln(hints, '- Click and drag a vertex to move and connect');\r\n                        document.body.appendChild(hints);\r\n\r\n                        // Creates a new DIV that is used as a toolbar and adds\r\n                        // toolbar buttons.\r\n                        var spacer = document.createElement('div');\r\n                        spacer.style.display = 'inline';\r\n                        spacer.style.padding = '8px';\r\n\r\n                        addToolbarButton(editor, toolbar, 'groupOrUngroup', '(Un)group', 'images/group.png');\r\n\r\n                        // Defines a new action for deleting or ungrouping\r\n                        editor.addAction('groupOrUngroup', function (editor, cell) {\r\n                            cell = cell || editor.graph.getSelectionCell();\r\n                            if (cell != null && editor.graph.isSwimlane(cell)) {\r\n                                editor.execute('ungroup', cell);\r\n                            }\r\n                            else {\r\n                                editor.execute('group');\r\n                            }\r\n                        });\r\n                        addToolbarButton(editor, toolbar, 'delete', 'Delete', 'images/delete2.png');\r\n\r\n                        toolbar.appendChild(spacer.cloneNode(true));\r\n\r\n                        addToolbarButton(editor, toolbar, 'cut', 'Cut', 'images/cut.png');\r\n                        addToolbarButton(editor, toolbar, 'copy', 'Copy', 'images/copy.png');\r\n                        addToolbarButton(editor, toolbar, 'paste', 'Paste', 'images/paste.png');\r\n                        toolbar.appendChild(spacer.cloneNode(true));\r\n\r\n                        addToolbarButton(editor, toolbar, 'undo', '', 'images/undo.png');\r\n                        addToolbarButton(editor, toolbar, 'redo', '', 'images/redo.png');\r\n\r\n                        toolbar.appendChild(spacer.cloneNode(true));\r\n\r\n                        addToolbarButton(editor, toolbar, 'show', 'Show', 'images/camera.png');\r\n                        addToolbarButton(editor, toolbar, 'print', 'Print', 'images/printer.png');\r\n\r\n                        toolbar.appendChild(spacer.cloneNode(true));\r\n                        // Defines a new export action\r\n                        editor.addAction('export', function (editor, cell) {\r\n                            var textarea = document.createElement('textarea');\r\n                            textarea.style.width = '400px';\r\n                            textarea.style.height = '400px';\r\n                            var enc = new mxCodec(mxUtils.createXmlDocument());\r\n                            var node = enc.encode(editor.graph.getModel());\r\n                            textarea.value = mxUtils.getPrettyXml(node);\r\n                            showModalWindow(graph, 'XML', textarea, 410, 440);\r\n                        });\r\n                        addToolbarButton(editor, toolbar, 'export', 'Export', 'images/export1.png');\r\n                        // ---\r\n\r\n                        // Adds toolbar buttons into the status bar at the bottom\r\n                        // of the window.\r\n                        addToolbarButton(editor, status, 'collapseAll', 'Collapse All', 'images/navigate_minus.png', true);\r\n                        addToolbarButton(editor, status, 'expandAll', 'Expand All', 'images/navigate_plus.png', true);\r\n                        status.appendChild(spacer.cloneNode(true));\r\n\r\n                        addToolbarButton(editor, status, 'enterGroup', 'Enter', 'images/view_next.png', true);\r\n                        addToolbarButton(editor, status, 'exitGroup', 'Exit', 'images/view_previous.png', true);\r\n                        status.appendChild(spacer.cloneNode(true));\r\n                        addToolbarButton(editor, status, 'zoomIn', '', 'images/zoom_in.png', true);\r\n                        addToolbarButton(editor, status, 'zoomOut', '', 'images/zoom_out.png', true);\r\n                        addToolbarButton(editor, status, 'actualSize', '', 'images/view_1_1.png', true);\r\n                        addToolbarButton(editor, status, 'fit', '', 'images/fit_to_size.png', true);\r\n\r\n                        // Creates the outline (navigator, overview) for moving\r\n                        // around the graph in the top, right corner of the window.\r\n                        var outln = new mxOutline(graph, outline);\r\n                        // To show the images in the outline, uncomment the following code\r\n                        //outln.outline.labelsVisible = true;\r\n                        //outln.outline.setHtmlLabels(true);\r\n\r\n                        // Fades-out the splash screen after the UI has been loaded.\r\n                        var splash = document.getElementById('splash');\r\n                        if (splash != null) {\r\n                            try {\r\n                                mxEvent.release(splash);\r\n                                mxEffects.fadeOut(splash, 100, true);\r\n                            }\r\n                            catch (e) {\r\n\r\n                                // mxUtils is not available (library not loaded)\r\n                                splash.parentNode.removeChild(splash);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                function addToolbarButton(editor, toolbar, action, label, image, isTransparent) {\r\n                    var button = document.createElement('button');\r\n                    button.style.fontSize = '10';\r\n                    if (image != null) {\r\n                        var img = document.createElement('img');\r\n                        img.setAttribute('src', image);\r\n                        img.style.width = '16px';\r\n                        img.style.height = '16px';\r\n                        img.style.verticalAlign = 'middle';\r\n                        img.style.marginRight = '2px';\r\n                        button.appendChild(img);\r\n                    }\r\n                    if (isTransparent) {\r\n                        button.style.background = 'transparent';\r\n                        button.style.color = '#FFFFFF';\r\n                        button.style.border = 'none';\r\n                    }\r\n                    mxEvent.addListener(button, 'click', function (evt) {\r\n                        editor.execute(action);\r\n                    });\r\n                    mxUtils.write(button, label);\r\n                    toolbar.appendChild(button);\r\n                };\r\n\r\n                function showModalWindow(graph, title, content, width, height) {\r\n                    var background = document.createElement('div');\r\n                    background.style.position = 'absolute';\r\n                    background.style.left = '0px';\r\n                    background.style.top = '0px';\r\n                    background.style.right = '0px';\r\n                    background.style.bottom = '0px';\r\n                    background.style.background = 'black';\r\n                    mxUtils.setOpacity(background, 50);\r\n                    document.body.appendChild(background);\r\n\r\n                    if (mxClient.IS_IE) {\r\n                        new mxDivResizer(background);\r\n                    }\r\n\r\n                    var x = Math.max(0, document.body.scrollWidth / 2 - width / 2);\r\n                    var y = Math.max(10, (document.body.scrollHeight ||\r\n                        document.documentElement.scrollHeight) / 2 - height * 2 / 3);\r\n                    var wnd = new mxWindow(title, content, x, y, width, height, false, true);\r\n                    wnd.setClosable(true);\r\n\r\n                    // Fades the background out after after the window has been closed\r\n                    wnd.addListener(mxEvent.DESTROY, function (evt) {\r\n                        graph.setEnabled(true);\r\n                        mxEffects.fadeOut(background, 50, true,\r\n                            10, 30, true);\r\n                    });\r\n                    graph.setEnabled(false);\r\n                    graph.tooltipHandler.hide();\r\n                    wnd.setVisible(true);\r\n                };\r\n\r\n                function addSidebarIcon(graph, sidebar, label, image) {\r\n                    // Function that is executed when the image is dropped on\r\n                    // the graph. The cell argument points to the cell under\r\n                    // the mousepointer if there is one.\r\n                    var funct = function (graph, evt, cell, x, y) {\r\n                        var parent = graph.getDefaultParent();\r\n                        var model = graph.getModel();\r\n\r\n                        var v1 = null;\r\n\r\n                        model.beginUpdate();\r\n                        try {\r\n                            // NOTE: For non-HTML labels the image must be displayed via the style\r\n                            // rather than the label markup, so use 'image=' + image for the style.\r\n                            // as follows: v1 = graph.insertVertex(parent, null, label,\r\n                            // pt.x, pt.y, 120, 120, 'image=' + image);\r\n                            v1 = graph.insertVertex(parent, null, label, x, y, 120, 120);\r\n                            v1.setConnectable(false);\r\n\r\n                            // Presets the collapsed size\r\n                            v1.geometry.alternateBounds = new mxRectangle(0, 0, 120, 40);\r\n\r\n                            // Adds the ports at various relative locations\r\n                            var port = graph.insertVertex(v1, null, 'Trigger', 0, 0.25, 16, 16,\r\n                                'port;image=editors/images/overlays/flash.png;align=right;imageAlign=right;spacingRight=18', true);\r\n                            port.geometry.offset = new mxPoint(-6, -8);\r\n\r\n                            var port = graph.insertVertex(v1, null, 'Input', 0, 0.75, 16, 16,\r\n                                'port;image=editors/images/overlays/check.png;align=right;imageAlign=right;spacingRight=18', true);\r\n                            port.geometry.offset = new mxPoint(-6, -4);\r\n\r\n                            var port = graph.insertVertex(v1, null, 'Error', 1, 0.25, 16, 16,\r\n                                'port;image=editors/images/overlays/error.png;spacingLeft=18', true);\r\n                            port.geometry.offset = new mxPoint(-8, -8);\r\n                            var port = graph.insertVertex(v1, null, 'Result', 1, 0.75, 16, 16,\r\n                                'port;image=editors/images/overlays/information.png;spacingLeft=18', true);\r\n                            port.geometry.offset = new mxPoint(-8, -4);\r\n                        }\r\n                        finally {\r\n                            model.endUpdate();\r\n                        }\r\n\r\n                        graph.setSelectionCell(v1);\r\n                    }\r\n\r\n                    // Creates the image which is used as the sidebar icon (drag source)\r\n                    var img = document.createElement('img');\r\n                    img.setAttribute('src', image);\r\n                    img.style.width = '48px';\r\n                    img.style.height = '48px';\r\n                    img.title = 'Drag this to the diagram to create a new vertex';\r\n                    sidebar.appendChild(img);\r\n\r\n                    var dragElt = document.createElement('div');\r\n                    dragElt.style.border = 'dashed black 1px';\r\n                    dragElt.style.width = '120px';\r\n                    dragElt.style.height = '120px';\r\n\r\n                    // Creates the image which is used as the drag icon (preview)\r\n                    var ds = mxUtils.makeDraggable(img, graph, funct, dragElt, 0, 0, true, true);\r\n                    ds.setGuidesEnabled(true);\r\n                };\r\n\r\n                function configureStylesheet(graph) {\r\n                    var style = new Object();\r\n                    style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\r\n                    style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\r\n                    style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\r\n                    style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\r\n                    style[mxConstants.STYLE_GRADIENTCOLOR] = '#41B9F5';\r\n                    style[mxConstants.STYLE_FILLCOLOR] = '#8CCDF5';\r\n                    style[mxConstants.STYLE_STROKECOLOR] = '#1B78C8';\r\n                    style[mxConstants.STYLE_FONTCOLOR] = '#000000';\r\n                    style[mxConstants.STYLE_ROUNDED] = true;\r\n                    style[mxConstants.STYLE_OPACITY] = '80';\r\n                    style[mxConstants.STYLE_FONTSIZE] = '12';\r\n                    style[mxConstants.STYLE_FONTSTYLE] = 0;\r\n                    style[mxConstants.STYLE_IMAGE_WIDTH] = '48';\r\n                    style[mxConstants.STYLE_IMAGE_HEIGHT] = '48';\r\n                    graph.getStylesheet().putDefaultVertexStyle(style);\r\n                    // NOTE: Alternative vertex style for non-HTML labels should be as\r\n                    // follows. This repaces the above style for HTML labels.\r\n                    /*var style = new Object();\r\n                    style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_LABEL;\r\n                    style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\r\n                    style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;\r\n                    style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\r\n                    style[mxConstants.STYLE_IMAGE_ALIGN] = mxConstants.ALIGN_CENTER;\r\n                    style[mxConstants.STYLE_IMAGE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;\r\n                    style[mxConstants.STYLE_SPACING_TOP] = '56';\r\n                    style[mxConstants.STYLE_GRADIENTCOLOR] = '#7d85df';\r\n                    style[mxConstants.STYLE_STROKECOLOR] = '#5d65df';\r\n                    style[mxConstants.STYLE_FILLCOLOR] = '#adc5ff';\r\n                    style[mxConstants.STYLE_FONTCOLOR] = '#1d258f';\r\n                    style[mxConstants.STYLE_FONTFAMILY] = 'Verdana';\r\n                    style[mxConstants.STYLE_FONTSIZE] = '12';\r\n                    style[mxConstants.STYLE_FONTSTYLE] = '1';\r\n                    style[mxConstants.STYLE_ROUNDED] = '1';\r\n                    style[mxConstants.STYLE_IMAGE_WIDTH] = '48';\r\n                    style[mxConstants.STYLE_IMAGE_HEIGHT] = '48';\r\n                    style[mxConstants.STYLE_OPACITY] = '80';\r\n                    graph.getStylesheet().putDefaultVertexStyle(style);*/\r\n                    style = new Object();\r\n                    style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_SWIMLANE;\r\n                    style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\r\n                    style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\r\n                    style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;\r\n                    style[mxConstants.STYLE_FILLCOLOR] = '#FF9103';\r\n                    style[mxConstants.STYLE_GRADIENTCOLOR] = '#F8C48B';\r\n                    style[mxConstants.STYLE_STROKECOLOR] = '#E86A00';\r\n                    style[mxConstants.STYLE_FONTCOLOR] = '#000000';\r\n                    style[mxConstants.STYLE_ROUNDED] = true;\r\n                    style[mxConstants.STYLE_OPACITY] = '80';\r\n                    style[mxConstants.STYLE_STARTSIZE] = '30';\r\n                    style[mxConstants.STYLE_FONTSIZE] = '16';\r\n                    style[mxConstants.STYLE_FONTSTYLE] = 1;\r\n                    graph.getStylesheet().putCellStyle('group', style);\r\n\r\n                    style = new Object();\r\n                    style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\r\n                    style[mxConstants.STYLE_FONTCOLOR] = '#774400';\r\n                    style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\r\n                    style[mxConstants.STYLE_PERIMETER_SPACING] = '6';\r\n                    style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_LEFT;\r\n                    style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\r\n                    style[mxConstants.STYLE_FONTSIZE] = '10';\r\n                    style[mxConstants.STYLE_FONTSTYLE] = 2;\r\n                    style[mxConstants.STYLE_IMAGE_WIDTH] = '16';\r\n                    style[mxConstants.STYLE_IMAGE_HEIGHT] = '16';\r\n                    graph.getStylesheet().putCellStyle('port', style);\r\n\r\n                    style = graph.getStylesheet().getDefaultEdgeStyle();\r\n                    style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = '#FFFFFF';\r\n                    style[mxConstants.STYLE_STROKEWIDTH] = '2';\r\n                    style[mxConstants.STYLE_ROUNDED] = true;\r\n                    style[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\r\n                };\r\n            }\r\n        },\r\n        mounted() {\r\n            // Creates the graph inside the given container\r\n            var graph = new mxGraph(this.$refs.graph_container);\r\n\r\n            // Gets the default parent for inserting new cells. This\r\n            // is normally the first child of the root (ie. layer 0).\r\n            var parent = graph.getDefaultParent();\r\n\r\n            // Adds cells to the model in a single step\r\n            graph.getModel().beginUpdate();\r\n\r\n            try {\r\n                let v1 = graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30);\r\n                let v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);\r\n                graph.insertEdge(parent, null, '', v1, v2);\r\n            } finally {\r\n                // Updates the display\r\n                graph.getModel().endUpdate();\r\n            }\r\n            // this.init();\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .grf {\r\n        border: 1px solid red;\r\n        padding: 50px 0;\r\n        height: 1000px;\r\n        overflow: auto;\r\n    }\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/pages/homepage/topology.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"hello\"},[_c('div',{ref:\"graph_container\",staticClass:\"grf\",staticStyle:{\"margin\":\"0px\"},attrs:{\"onload\":\"main(document.getElementById('graphContainer'),\\n\\t\\t\\tdocument.getElementById('outlineContainer'),\\n\\t\\t \\tdocument.getElementById('toolbarContainer'),\\n\\t\\t\\tdocument.getElementById('sidebarContainer'),\\n            document.getElementById('statusContainer'));\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"white-space\":\"nowrap\",\"overflow\":\"hidden\",\"top\":\"0px\",\"left\":\"0px\",\"max-height\":\"24px\",\"height\":\"36px\",\"right\":\"0px\",\"padding\":\"6px\",\"background-image\":\"url('images/toolbar_bg.gif')\"},attrs:{\"id\":\"toolbarContainer\"}})]),_vm._v(\" \"),[_c('div',{staticClass:\"block\"},[_c('el-slider',{attrs:{\"vertical\":\"\",\"height\":\"200px\"},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})],1)]],2)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-44cfdb52\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/pages/homepage/topology.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-44cfdb52\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./topology.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./topology.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./topology.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-44cfdb52\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./topology.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-44cfdb52\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/homepage/topology.vue\n// module id = null\n// module chunks = ","(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.0.5.\n\t */\n\tVERSION: '4.0.5',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent.indexOf('MSIE') >= 0 && (document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0,\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: navigator.userAgent.indexOf('AppleWebKit/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Chrome/') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n  \t\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false),\n  \t\t\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: navigator.userAgent.indexOf('Chrome/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: navigator.userAgent.indexOf('Firefox/') >= 0,\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.userAgent),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value. The use of setAttribute\n\t\t// is not possible.\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\tswitch (node.nodeType)\n\t\t\t{\n\t\t\t\tcase 1: /* element */\n\t\t\t\t{\n\t\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\t\n\t\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNode(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3: /* text */\n\t\t\t    case 4: /* cdata-section */\n\t\t\t    case 8: /* comment */\n\t\t\t    {\n\t\t\t      return doc.createTextNode(node.value);\n\t\t\t      break;\n\t\t\t    }\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (window.ActiveXObject)\n\t\t{\n\t\t\tdoc = new ActiveXObject('Microsoft.XMLDOM');\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar result = mxUtils.createXmlDocument();\n\t\t\t\tresult.async = false;\n\t\t\t\t// Workaround for parsing errors with SVG DTD\n\t\t\t\tresult.validateOnParse = false;\n\t\t\t\tresult.resolveExternals = false;\n\t\t\t\tresult.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t */\n\tgetPrettyXml: function(node, tab, indent)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = tab || '  ';\n\t\t\tindent = indent || '';\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value =  mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value) + '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each\n\t\t\t\t// child nodes and appends it here with an\n\t\t\t\t// indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>\\n');\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+node.nodeName + '>\\n');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push('/>\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\n\t\tif (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif (a[i] == b[i] || (a[i] != null && !a[i].equals(b[i])))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y  + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx = -0.5;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy = -0.5;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * the vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault : mxEvent.isMouseEvent(this.evt);\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument and a boolean up\n\t * argument for the mousewheel direction.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar delta = 0;\n\t\t\t\t\n\t\t\t\tif (mxClient.IS_FF)\n\t\t\t\t{\n\t\t\t\t\tdelta = -evt.detail / 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta = evt.wheelDelta / 120;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (delta != 0)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, delta > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// Webkit has NS event API, but IE event name and details \n\t\t\tif (mxClient.IS_NS && document.documentMode == null)\n\t\t\t{\n\t\t\t\tvar eventName = (mxClient.IS_SF || mxClient.IS_GC) ? 'mousewheel' : 'DOMMouseScroll';\n\t\t\t\tmxEvent.addListener((mxClient.IS_GC && target != null) ? target : window,\n\t\t\t\t\teventName, wheelHandler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.addListener(document, 'mousewheel', wheelHandler);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset'\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn this.request.status;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechaange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n},\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n},\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t})\n\t\t);\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: blockImagePointerEvents\n * \n * Specifies if a transparent rectangle should be added on top of images to absorb\n * all pointer events. Default is false. This is only needed in Firefox to disable\n * control-clicks on images.\n */\nmxSvgCanvas2D.prototype.blockImagePointerEvents = false;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tif (this.foAltText != null)\n\t{\n\t\tvar s = this.state;\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(w / 2));\n\t\talt.setAttribute('y', Math.round((h + s.fontSize) / 2));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('text-anchor', 'middle');\n\t\talt.setAttribute('font-size', s.fontSize + 'px');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', 'underline');\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, this.foAltText);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t\t{\n\t\t\t\t// Workaround for potential base tag and brackets must be escaped\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n\t\n\t// Disables control-clicks on images in Firefox to open in new tab\n\t// by putting a rect in the foreground that absorbs all events and\n\t// disabling all pointer-events on the original image tag.\n\tif (this.blockImagePointerEvents)\n\t{\n\t\tnode.setAttribute('style', 'pointer-events:none');\n\t\t\n\t\tnode = this.createElement('rect');\n\t\tnode.setAttribute('visibility', 'hidden');\n\t\tnode.setAttribute('pointer-events', 'fill');\n\t\tnode.setAttribute('x', this.format(x * s.scale));\n\t\tnode.setAttribute('y', this.format(y * s.scale));\n\t\tnode.setAttribute('width', this.format(w * s.scale));\n\t\tnode.setAttribute('height', this.format(h * s.scale));\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str, align, valign, style, overflow, whiteSpace)\n{\n\tvar s = this.state;\n\n\t// Inline block for rendering HTML background over SVG in Safari\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\t\n\tstyle = 'display:inline-block;font-size:' + s.fontSize + 'px;font-family:' + s.fontFamily +\n\t\t';color:' + s.fontColor + ';line-height:' + lh + ';' + style;\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle += 'font-weight:bold;';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle += 'font-style:italic;';\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle += 'text-decoration:underline;';\n\t}\n\t\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle += 'text-align:center;';\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle += 'text-align:right;';\n\t}\n\telse\n\t{\n\t\tstyle += 'text-align:left;';\n\t}\n\n\tvar css = '';\n\t\n\tif (s.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(s.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (s.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(s.fontBorderColor) + ';';\n\t}\n\t\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = this.convertHtml(val);\n\t\t\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\t// Workaround for no wrapping in HTML canvas for image\n\t\t\t// export if the inner HTML contains a DIV with width\n\t\t\tif (whiteSpace != null)\n\t\t\t{\n\t\t\t\tcss += 'white-space:' + whiteSpace + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Inner div always needed to measure wrapped text\n\t\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display:inline-block;text-align:inherit;text-decoration:inherit;' + css + '\">' + val + '</div>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle += css;\n\t\t}\n\t}\n\n\t// Uses DOM API where available. This cannot be used in IE to avoid\n\t// an opening and two (!) closing TBODY tags being added to tables.\n\tif (!mxClient.IS_IE && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\tdiv.setAttribute('style', style);\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.appendChild(val);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\t// Serializes for export\n\t\tif (mxUtils.isNode(val) && this.root.ownerDocument != document)\n\t\t{\n\t\t\tval = val.outerHTML;\n\t\t}\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn mxUtils.parseXml('<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"' + style + \n\t\t\t'\">' + val + '</div>').documentElement;\n\t}\n};\n\n/**\n * Invalidates the cached offset size for the given node.\n */\nmxSvgCanvas2D.prototype.invalidateCachedOffsetSize = function(node)\n{\n\tdelete node.firstChild.mxCachedOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetHeight;\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null &&\n\t\tnode.firstChild.firstChild.firstChild != null)\n\t{\n\t\t// Uses outer group for opacity and transforms to\n\t\t// fix rendering order in Chrome\n\t\tvar group = node.firstChild;\n\t\tvar fo = group.firstChild;\n\t\tvar div = fo.firstChild;\n\n\t\trotation = (rotation != null) ? rotation : 0;\n\t\t\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\t\t\n\t\tif (clip)\n\t\t{\n\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\tdiv.style.maxWidth = Math.round(w) + 'px';\n\t\t}\n\t\telse if (overflow == 'fill')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\tdiv.style.height = Math.round(h + 1) + 'px';\n\t\t}\n\t\telse if (overflow == 'width')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\t\n\t\t\tif (h > 0)\n\t\t\t{\n\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t}\n\t\t}\n\n\t\tif (wrap && w > 0)\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t}\n\t\t\n\t\t// Code that depends on the size which is computed after\n\t\t// the element was added to the DOM.\n\t\tvar ow = 0;\n\t\tvar oh = 0;\n\t\t\n\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\tvar padX = 0;\n\t\tvar padY = 2;\n\n\t\tvar sizeDiv = div;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t}\n\t\t\n\t\tvar tmp = (group.mxCachedOffsetWidth != null) ? group.mxCachedOffsetWidth : sizeDiv.offsetWidth;\n\t\tow = tmp + padX;\n\n\t\t// Recomputes the height of the element for wrapped width\n\t\tif (wrap && overflow != 'fill')\n\t\t{\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\t\t\t\n\t\t\tdiv.style.width = Math.round(ow + 1) + 'px';\n\t\t}\n\n\t\tow = (group.mxCachedFinalOffsetWidth != null) ? group.mxCachedFinalOffsetWidth : sizeDiv.offsetWidth;\n\t\toh = (group.mxCachedFinalOffsetHeight != null) ? group.mxCachedFinalOffsetHeight : sizeDiv.offsetHeight;\n\t\t\n\t\tif (this.cacheOffsetSize)\n\t\t{\n\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t}\n\t\t\n\t\tow += padX;\n\t\toh -= 2;\n\t\t\n\t\tif (clip)\n\t\t{\n\t\t\toh = Math.min(oh, h);\n\t\t\tow = Math.min(ow, w);\n\t\t}\n\n\t\tif (overflow == 'width')\n\t\t{\n\t\t\th = oh;\n\t\t}\n\t\telse if (overflow != 'fill')\n\t\t{\n\t\t\tw = ow;\n\t\t\th = oh;\n\t\t}\n\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx -= w;\n\t\t}\n\t\t\n\t\tx += dx;\n\t\t\n\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy -= h / 2;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy -= h;\n\t\t}\n\t\t\n\t\t// Workaround for rendering offsets\n\t\t// TODO: Check if export needs these fixes, too\n\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t{\n\t\t\tdy -= 2;\n\t\t}\n\t\t\n\t\ty += dy;\n\n\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t{\n\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\ty = pt.y - h * s.scale / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx *= s.scale;\n\t\t\ty *= s.scale;\n\t\t}\n\n\t\tif (rotation != 0)\n\t\t{\n\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t}\n\n\t\tgroup.setAttribute('transform', 'translate(' + Math.round(x) + ',' + Math.round(y) + ')' + tr);\n\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t}\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\t\t\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\t\t\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar style = 'vertical-align:top;';\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tstyle += 'overflow:hidden;max-height:' + Math.round(h) + 'px;max-width:' + Math.round(w) + 'px;';\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;height:' + Math.round(h + 1) + 'px;overflow:hidden;';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;';\n\t\t\t\t\n\t\t\t\tif (h > 0)\n\t\t\t\t{\n\t\t\t\t\tstyle += 'max-height:' + Math.round(h) + 'px;overflow:hidden;';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;white-space:normal;word-wrap:' +\n\t\t\t\t\tmxConstants.WORD_WRAP + ';';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle += 'white-space:nowrap;';\n\t\t\t}\n\t\t\t\n\t\t\t// Uses outer group for opacity and transforms to\n\t\t\t// fix rendering order in Chrome\n\t\t\tvar group = this.createElement('g');\n\t\t\t\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\n\t\t\tvar fo = this.createElement('foreignObject');\n\t\t\tfo.setAttribute('style', 'overflow:visible;');\n\t\t\tfo.setAttribute('pointer-events', (this.pointerEvents) ? this.pointerEventsValue : 'none');\n\t\t\t\n\t\t\tvar div = this.createDiv(str, align, valign, style, overflow, (wrap && w > 0) ? 'normal' : null);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tgroup.appendChild(fo);\n\t\t\tthis.root.appendChild(group);\n\t\t\t\n\t\t\t// Code that depends on the size which is computed after\n\t\t\t// the element was added to the DOM.\n\t\t\tvar ow = 0;\n\t\t\tvar oh = 0;\n\t\t\t\n\t\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\t\tvar padX = 2;\n\t\t\tvar padY = 2;\n\n\t\t\t// NOTE: IE is always export as it does not support foreign objects\n\t\t\tif (mxClient.IS_IE && (document.documentMode == 9 || !mxClient.IS_SVG))\n\t\t\t{\n\t\t\t\t// Handles non-standard namespace for getting size in IE\n\t\t\t\tvar clone = document.createElement('div');\n\t\t\t\t\n\t\t\t\tclone.style.cssText = div.getAttribute('style');\n\t\t\t\tclone.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tclone.style.position = 'absolute';\n\t\t\t\tclone.style.visibility = 'hidden';\n\n\t\t\t\t// Inner DIV is needed for text measuring\n\t\t\t\tvar div2 = document.createElement('div');\n\t\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tdiv2.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv2.innerHTML = (mxUtils.isNode(str)) ? str.outerHTML : str;\n\t\t\t\tclone.appendChild(div2);\n\n\t\t\t\tdocument.body.appendChild(clone);\n\n\t\t\t\t// Workaround for different box models\n\t\t\t\tif (document.documentMode != 8 && document.documentMode != 9 && s.fontBorderColor != null)\n\t\t\t\t{\n\t\t\t\t\tpadX += 2;\n\t\t\t\t\tpadY += 2;\n\t\t\t\t}\n\n\t\t\t\tif (wrap && w > 0)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div2.offsetWidth;\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for adding padding twice in IE8/IE9 standards mode if label is wrapped\n\t\t\t\t\tpadDx = 0;\n\t\t\t\t\t\n\t\t\t\t\t// For export, if no wrapping occurs, we add a large padding to make\n\t\t\t\t\t// sure there is no wrapping even if the text metrics are different.\n\t\t\t\t\t// This adds support for text metrics on different operating systems.\n\t\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document && overflow != 'fill')\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ws = clone.style.whiteSpace;\n\t\t\t\t\t\tdiv2.style.whiteSpace = 'nowrap';\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp < div2.offsetWidth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclone.style.whiteSpace = ws;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclone.style.width = tmp + 'px';\n\t\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX + padDx;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t\t\n\t\t\t\t\t// Overrides the width of the DIV via XML DOM by using the\n\t\t\t\t\t// clone DOM style, getting the CSS text for that and\n\t\t\t\t\t// then setting that on the DIV via setAttribute\n\t\t\t\t\tclone.style.display = 'inline-block';\n\t\t\t\t\tclone.style.position = '';\n\t\t\t\t\tclone.style.visibility = '';\n\t\t\t\t\tclone.style.width = ow + 'px';\n\t\t\t\t\t\n\t\t\t\t\tdiv.setAttribute('style', clone.style.cssText);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t}\n\n\t\t\t\tclone.parentNode.removeChild(clone);\n\t\t\t\tfo.appendChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Uses document for text measuring during export\n\t\t\t\tif (this.root.ownerDocument != document)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t}\n\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\t\n\t\t\t\t\tif (wrap && div.style.wordWrap == 'break-word')\n\t\t\t\t\t{\n\t\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\t\n\t\t\t\t// Workaround for text measuring in hidden containers\n\t\t\t\tif (tmp == 0 && div.parentNode == fo)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\t\n\t\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document &&\n\t\t\t\t\toverflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tvar ws = div.style.whiteSpace;\n\t\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t\t\t\n\t\t\t\t\tif (tmp < sizeDiv.offsetWidth)\n\t\t\t\t\t{\n\t\t\t\t\t\tdiv.style.whiteSpace = ws;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tow = tmp + padX - 1;\n\n\t\t\t\t// Recomputes the height of the element for wrapped width\n\t\t\t\tif (wrap && overflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\tow = Math.min(ow, w);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdiv.style.width = ow + 'px';\n\t\t\t\t}\n\n\t\t\t\tow = sizeDiv.offsetWidth;\n\t\t\t\toh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t\t\t}\n\n\t\t\t\toh -= padY;\n\t\t\t\t\n\t\t\t\tif (div.parentNode != fo)\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t\tdiv.style.visibility = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\toh = Math.min(oh, h);\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\n\t\t\tif (overflow == 'width')\n\t\t\t{\n\t\t\t\th = oh;\n\t\t\t}\n\t\t\telse if (overflow != 'fill')\n\t\t\t{\n\t\t\t\tw = ow;\n\t\t\t\th = oh;\n\t\t\t}\n\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tx += dx;\n\t\t\t\n\t\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tdy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tdy -= h;\n\t\t\t}\n\t\t\t\n\t\t\t// Workaround for rendering offsets\n\t\t\t// TODO: Check if export needs these fixes, too\n\t\t\t//if (this.root.ownerDocument == document)\n\t\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t\t{\n\t\t\t\tdy -= 2;\n\t\t\t}\n\t\t\t\n\t\t\ty += dy;\n\n\t\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\t\ty = pt.y - h * s.scale / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t\t}\n\n\t\t\tgroup.setAttribute('transform', 'translate(' + (Math.round(x) + this.foOffset) + ',' +\n\t\t\t\t(Math.round(y) + this.foOffset) + ')' + tr);\n\t\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t\t\t\n\t\t\t// Adds alternate content if foreignObject not supported in viewer\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\t\t\n\t\t\t\tif (alt != null)\n\t\t\t\t{\n\t\t\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\t\t\tvar sw = this.createElement('switch');\n\t\t\t\t\tsw.appendChild(fo);\n\t\t\t\t\tsw.appendChild(alt);\n\t\t\t\t\tgroup.appendChild(sw);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 2;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\t\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tnode.setAttribute('text-decoration', 'underline');\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function()\n{\n\treturn this.graph.gridSize / 2;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar trx = this.graph.getView().translate;\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\t\n\t\tvar tt = this.getGuideTolerance();\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\t\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\t\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state)\n\t\t{\n\t\t\tx += this.graph.panDx;\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - left) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x;\n\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x - bounds.width;\n\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = Math.round(x - this.graph.panDx);\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state)\n\t\t{\n\t\t\ty += this.graph.panDy;\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - top) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y;\n\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y - bounds.height;\n\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = Math.round(y - this.graph.panDy);\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state);\n\t\t\t\t\tsnapX.call(this, state.x, state);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state);\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state);\n\t\t\t\t\tsnapY.call(this, state.y, state);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells that are off-grid back to the grid on move\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tif (!overrideX)\n\t\t\t{\n\t\t\t\tvar tx = bounds.x - (this.graph.snap(bounds.x /\n\t\t\t\t\tscale - trx.x) + trx.x) * scale;\n\t\t\t\tdx = this.graph.snap(dx / scale) * scale - tx;\n\t\t\t}\n\t\t\t\n\t\t\tif (!overrideY)\n\t\t\t{\n\t\t\t\tvar ty = bounds.y - (this.graph.snap(bounds.y /\n\t\t\t\t\tscale - trx.y) + trx.y) * scale;\n\t\t\t\tdy = this.graph.snap(dy / scale) * scale - ty;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + dy - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + dy - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy), new mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + dx - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + dx - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY), new mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\n\t\tdelta = this.getDelta(bounds, stateX, dx, stateY, dy)\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\t// Round to pixels for virtual states (eg. page guides)\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.floor(bounds.x + dx) - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.floor(bounds.y + dy) - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.paint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tcanvas.blockImagePointerEvents = mxClient.IS_FF;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\ttmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\tvar unscaledWidth = (this.state != null) ? this.state.unscaledWidth : null;\n\n\tif (update)\n\t{\n\t\tif (this.node.firstChild != null && (unscaledWidth == null ||\n\t\t\tthis.lastUnscaledWidth != unscaledWidth))\n\t\t{\n\t\t\tc.invalidateCachedOffsetSize(this.node);\n\t\t}\n\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval =  mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt, this.overflow,\n\t\t\tthis.clipped, this.getTextRotation(), dir);\n\t}\n\t\n\t// Needs to invalidate the cached offset widths if the geometry changes\n\tthis.lastUnscaledWidth = unscaledWidth;\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\n\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t{\n\t\t\t\tthis.updateHtmlFilter();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateHtmlTransform();\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null &&\n\t\t\t\tcanvas.invalidateCachedOffsetSize != null)\n\t\t\t{\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\tnode = node.firstChild.firstChild;\n\t\t\t\tow = parseInt(node.getAttribute('width')) * this.scale;\n\t\t\t\toh = parseInt(node.getAttribute('height')) * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tvar style = this.node.style;\n\n\t// Resets CSS styles\n\tstyle.whiteSpace = 'normal';\n\tstyle.overflow = '';\n\tstyle.width = '';\n\tstyle.height = '';\n\t\n\tthis.updateValue();\n\tthis.updateFont(this.node);\n\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\tthis.offsetWidth = null;\n\tthis.offsetHeight = null;\n\n\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t{\n\t\tthis.updateHtmlFilter();\n\t}\n\telse\n\t{\n\t\tthis.updateHtmlTransform();\n\t}\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ')' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: setInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\telse\n\t{\n\t\tstyle.textDecoration = '';\n\t}\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar mid = y + h / 2;\n\n\tc.begin();\n\tc.moveTo(x, mid);\n\tc.lineTo(x + w, mid);\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getArcSize = function(w, h, start)\n{\n\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\treturn start * f * 3; \n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\t\n\treturn (style != null) ? style[key] : null;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1);\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\tvar nodeId = mxCellPath.create(modelRoots[i]);\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n */\nmxGraphModel.prototype.cloneCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], true)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Boolean indicating if the cells should be cloned\n * with all descendants.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn val || defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (!mxClient.NO_FO)\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / scale, clip.height * s / scale);\n\t\t\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup\n\t\t\t\t\tif (bbox != null && !mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\t//return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n * \n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n * \n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n * \n * Example:\n * \n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n * \n * Modifies the built-in default styles.\n * \n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n * \n * (code)\n * ;shadow=1\n * (end)\n * \n * Removing keys:\n * \n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n * \n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n * \n * Constructor: mxStylesheet\n * \n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\t\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n * \n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n * \n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\t\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n * \n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\t\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n * \n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n * \n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n * \n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n * \n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n * \n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n * \n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n * \n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n * \n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n * \n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n * \n * Parameters:\n * \n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n * \n * Parameters:\n * \n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\t\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\t \t\t\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\t\t\t\t\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\t\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tabsoluteRoot = mxUtils.getCurrentStyle(root).position == 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar uline = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE;\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = (uline) ? 'underline' : '';\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR, mxConstants.STYLE_GRADIENTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar value = state.shape[field];\n\tvar graph = state.view.graph;\n\tvar referenced = null;\n\t\n\tif (value == 'inherit')\n\t{\n\t\treferenced = graph.model.getParent(state.cell);\n\t}\n\telse if (value == 'swimlane')\n\t{\n\t\tstate.shape[field] = (key == mxConstants.STYLE_STROKECOLOR) ? '#000000' : '#ffffff';\n\t\t\n\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t{\n\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treferenced = state.cell;\n\t\t}\n\t\t\n\t\treferenced = graph.getSwimlane(referenced);\n\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t}\n\telse if (value == 'indicated')\n\t{\n\t\tstate.shape[field] = state.shape.indicatorColor;\n\t}\n\t\n\tif (referenced != null)\n\t{\n\t\tvar rstate = graph.getView().getState(referenced);\n\t\tstate.shape[field] = null;\n\n\t\tif (rstate != null)\n\t\t{\n\t\t\tif (rstate.shape != null && field != 'indicatorColor')\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.shape[field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.style[key];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\t!state.text.bounds.equals(bounds))\n\t\t{\n\t\t\t// Forces an update of the text bounding box\n\t\t\tif (state.text.bounds.width != 0 && state.unscaledWidth != null &&\n\t\t\t\tMath.round((state.text.bounds.width /\n\t\t\t\tstate.text.scale * nextScale) - bounds.width) != 0)\n\t\t\t{\n\t\t\t\tstate.unscaledWidth = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\n\t\tvar sc = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\t\n\t\tif (sc != mxConstants.NONE && sc != '')\n\t\t{\n\t\t\tvar s = parseFloat(mxUtils.getValue(state.style, mxConstants.STYLE_STROKEWIDTH, 1)) * scale;\n\t\t\tvar dx = 1 + Math.floor((s - 1) / 2);\n\t\t\tvar dh = Math.floor(s + 1);\n\t\t\t\n\t\t\tbounds.x += dx;\n\t\t\tbounds.y += dx;\n\t\t\tbounds.width -= dh;\n\t\t\tbounds.height -= dh;\n\t\t}\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tpt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode.firstChild != null && shapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\t\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function (state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\t\n\t\t\t \tif (sourceGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (target != null)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = target.x + target.width < source.x;\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t\t \tif (targetGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (source != null)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = source.x + source.width < target.x;\n\t\t\t \t}\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function (state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function (state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function (state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t */\n\tSegmentConnector: function(state, source, target, hints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = state.absolutePoints;\n\t\tvar tol = Math.max(1, state.view.scale);\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= tol)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tpt.x = Math.round(pt.x);\n\t\tpt.y = Math.round(pt.y);\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (hints != null && hints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar newHints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, hints[i]);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.x = Math.round(tmp.x);\n\t\t\t\t\ttmp.y = Math.round(tmp.y);\n\t\t\t\t\tnewHints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (newHints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\thints = newHints;\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x);\n\t\t\tpt.y = Math.round(pt.y);\n\t\t\t\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, source, target, points, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, source, target, points, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar scaledSourceBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, true);\n\t\tvar scaledTargetBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, false);\n\t\t\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\tscaledTargetBuffer = Math.max(scaledSourceBuffer, scaledTargetBuffer);\n\t\t\tscaledSourceBuffer = scaledTargetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = scaledTargetBuffer + scaledSourceBuffer;\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (points != null &&\n\t\t\tpoints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, source, target, points, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t// Avoids floating point number errors\n\t\tsourceX = Math.round(sourceX * 10) / 10;\n\t\tsourceY = Math.round(sourceY * 10) / 10;\n\t\tsourceWidth = Math.round(sourceWidth * 10) / 10;\n\t\tsourceHeight = Math.round(sourceHeight * 10) / 10;\n\t\t\n\t\ttargetX = Math.round(targetX * 10) / 10;\n\t\ttargetY = Math.round(targetY * 10) / 10;\n\t\ttargetWidth = Math.round(targetWidth * 10) / 10;\n\t\ttargetHeight = Math.round(targetHeight * 10) / 10;\n\t\t\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [scaledSourceBuffer, scaledTargetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0]), Math.round(mxEdgeStyle.wayPoints1[i][1])));\n\t\t}\n\t\t\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = geo.offset || this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.width / this.scale + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.height / this.scale + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\t\n\t    return new mxPoint(this.scale * (pt.x + this.translate.x + orig.x),\n\t    \tthis.scale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient- and indicatorColors special keywords can be\n * used. The inherit keyword for one of these colors will inherit the color\n * for the same key from the parent cell. The swimlane keyword does the same,\n * but inherits from the nearest swimlane in the ancestor hierarchy. Finally,\n * the indicated keyword will use the color of the indicator as the color for\n * the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function()\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange)\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null && change.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null, mxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected;\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar swimlane = null;\n\t\t\t\n\t\t\tif (this.isSwimlaneSelectionEnabled())\n\t\t\t{\n\t\t\t\t// Gets the swimlane at the location (includes\n\t\t\t\t// content area of swimlanes)\n\t\t\t\tswimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\t// Selects the swimlane and consumes the event\n\t\t\tif (swimlane != null)\n\t\t\t{\n\t\t\t\tthis.selectCellForEvent(swimlane, evt);\n\t\t\t}\n\t\t\t\n\t\t\t// Ignores the event if the control key is pressed\n\t\t\telse if (!this.isToggleEvent(evt))\n\t\t\t{\n\t\t\t\tthis.clearSelection();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x + bounds.width + border);\n\t\tvar height = Math.max(0, bounds.y + bounds.height + border);\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar state = this.view.getState(cells[0]);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\t\tthis.setCellStyles(key, value, cells);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar state = this.view.getState(cells[0]);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\t\tvalue = !((current & flag) == flag);\n\t\t\t}\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var state = this.view.getState(edge);\n *     var style = (state != null) ? state.style : this.getCellStyle(edge);\n *     \n *     if (style != null)\n *     {\n *       var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *           mxConstants.ELBOW_HORIZONTAL);\n *       var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *           mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *       this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *     }\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 0 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\n\t\t// Finds the cells with children\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getChildCount(cells[i]) > 0)\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tcells = tmp;\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar left = 0;\n\t\t\t\t\t\tvar top = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.getStartSize(cells[i]);\n\t\t\t\t\t\t\tleft = size.width;\n\t\t\t\t\t\t\ttop = size.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - left - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - top - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + left + leftBorder + rightBorder);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + top + topBorder + bottomBorder);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + left - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + top - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tvar parent = this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cell) || this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.getState(cell) || this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize, style[mxConstants.STYLE_FONTFAMILY]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t\t'cells', cells, 'bounds', bounds));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.cellResized(cells[i], bounds[i], false, recurse);\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t\t'cells', cells, 'bounds', bounds));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null && (geo.x != bounds.x || geo.y != bounds.y ||\n\t\tgeo.width != bounds.width || geo.height != bounds.height))\n\t{\n\t\tgeo = geo.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = newGeo.width / geo.width;\n\tvar dy = newGeo.height / geo.height;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\t\n\t\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_WHITE_SPACE] == 'wrap' : false;\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_OVERFLOW] == 'hidden' : false;\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n */\nmxGraph.prototype.getStartSize = function(swimlane)\n{\n\tvar result = new mxRectangle();\n\tvar state = this.view.getState(swimlane);\n\tvar style = (state != null) ? state.style : this.getCellStyle(swimlane);\n\t\n\tif (style != null)\n\t{\n\t\tvar size = parseInt(mxUtils.getValue(style,\n\t\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\t\n\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n */\nmxGraph.prototype.isSwimlane = function (cell)\n{\n\tif (cell != null)\n\t{\n\t\tif (this.model.getParent(cell) != this.model.getRoot())\n\t\t{\n\t\t\tvar state = this.view.getState(cell);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\t\tif (style != null && !this.model.isEdge(cell))\n\t\t\t{\n\t\t\t\treturn style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var state = this.view.getState(cell);\n *   var style = (state != null) ? state.style : this.getCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isSwimlane(child))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * source - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n };\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent)\n{\n\tthis.selectCells(true, false, parent);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t((this.model.getChildCount(cell) == 0 && this.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN && !mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell)\n * {\n *   return layout;\n * };\n * (end)\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: updateHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.updateHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout to be executed for the given graph and parent.\n */\nmxLayoutManager.prototype.getLayout = function(parent)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from the undoHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tvar cells = this.getCellsForChanges(undoableEdit.changes);\n\tvar model = this.getGraph().getModel();\n\n\t// Adds all descendants\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\ttmp = tmp.concat(model.getDescendants(cells[i]));\n\t}\n\t\n\tcells = tmp;\n\t\n\t// Adds all parent ancestors\n\tif (this.isBubbling())\n\t{\n\t\ttmp = model.getParents(cells);\n\t\t\n\t\twhile (tmp.length > 0)\n\t\t{\n\t\t\tcells = cells.concat(tmp);\n\t\t\ttmp = model.getParents(tmp);\n\t\t}\n\t}\n\t\n\tthis.executeLayoutForCells(cells);\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leafes\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tsorted = sorted.concat(sorted.slice().reverse());\n\tthis.layoutCells(sorted);\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from the moveHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = model.getParent(cells[i]);\n\t\t\t\n\t\t\tif (mxUtils.indexOf(cells, parent) < 0)\n\t\t\t{\n\t\t\t\tvar layout = this.getLayout(parent);\n\t\n\t\t\t\tif (layout != null)\n\t\t\t\t{\n\t\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForEdit\n * \n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cells = this.getCellsForChange(change);\n\t\t\t\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\tif (cells[j] != null && !dict.get(cells[j]))\n\t\t\t\t{\n\t\t\t\t\tdict.put(cells[j], true);\n\t\t\t\t\tresult.push(cells[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn [change.child, change.previous, model.getParent(change.child)];\n\t}\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\treturn [change.cell, model.getParent(change.cell)];\n\t}\n\telse if (change instanceof mxVisibleChange || change instanceof mxStyleChange)\n\t{\n\t\treturn [change.cell];\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tif (this.executeLayout(this.getLayout(cells[i]), cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = cells[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(layout, parent)\n{\n\tvar result = false;\n\t\n\tif (layout != null && parent != null)\n\t{\n\t\tlayout.execute(parent);\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.updatePreview();\n\t\tthis.updateHint();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.first != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\t\t\t\tthis.updatePreview(true);\n\t\t\t\t\n\t\t\t\t// Resets handlers after they have been refreshed\n\t\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(this.cells, false);\n\t\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\t}\n\t\t\t\t}), 0);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Resets the handler if cells have vanished\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn (!this.cloning && this.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar s = this.graph.view.scale;\n\t\n\treturn new mxPoint(this.roundLength((point.x - this.first.x) / s) * s,\n\t\tthis.roundLength((point.y - this.first.y) / s) * s);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. This uses Math.round.\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 2) / 2;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(dx) > tol || Math.abs(dy) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar hideGuide = true;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\n\t\t\tvar target = null;\n\t\t\tvar cell = me.getCell();\n\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (graph.model.getParent(this.cell) != target || clone))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (this.livePreviewActive && clone)\n\t\t\t{\n\t\t\t\tthis.resetLivePreview();\n\t\t\t\tthis.livePreviewActive = false;\n\t\t\t}\n\t\t\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.setHandlesVisibleForCells(this.cells, false);\n\t\t\t\tthis.livePreviewActive = true;\n\t\t\t\tthis.livePreviewUsed = true;\n\t\t\t}\n\t\t\telse if (!this.livePreviewUsed && this.shape == null)\n\t\t\t{\n\t\t\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, new mxPoint(dx, dy), gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t\tdx = delta.x;\n\t\t\t\tdy = delta.y;\n\t\t\t}\n\t\t\telse if (gridEnabled)\n\t\t\t{\n\t\t\t\tvar trx = graph.getView().translate;\n\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar tx = this.bounds.x - (graph.snap(this.bounds.x / scale - trx.x) + trx.x) * scale;\n\t\t\t\tvar ty = this.bounds.y - (graph.snap(this.bounds.y / scale - trx.y) + trx.y) * scale;\n\t\t\t\tvar v = this.snap(new mxPoint(dx, dy));\n\t\t\t\n\t\t\t\tdx = v.x - tx;\n\t\t\t\tdy = v.y - ty;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(dx) > Math.abs(dy))\n\t\t\t\t{\n\t\t\t\t\tdy = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdx = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentDx = dx;\n\t\t\tthis.currentDy = dy;\n\t\t\tthis.updatePreview();\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.updateLivePreview(this.currentDx - this.graph.panDx,\n\t\t\t\tthis.currentDy - this.graph.panDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx - this.graph.panDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy - this.graph.panDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tvar states = [];\n\t\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Saves current state\n\t\t\tvar tempState = state.clone();\n\t\t\tstates.push([state, tempState]);\n\n\t\t\t// Makes transparent for events to detect drop targets\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t{\n\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstate.shape.pointerEvents = false;\n\n\t\t\t\tif (state.text != null && state.text.node != null)\n\t\t\t\t{\n\t\t\t\t\tvar node = state.text.node;\n\t\t\t\t\t\n\t\t\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.firstChild.firstChild.setAttribute('pointer-events', 'none');\n\t\t\t\t\t}\n\t\t\t\t\telse if (node.ownerSVGElement != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.pointerEvents = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Temporarily changes position\n\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\n\t\t\t\t// Draws the live preview\n\t\t\t\tif (!this.cloning)\n\t\t\t\t{\n\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\n\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\tstate.invalid = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Hides folding icon\n\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t{\n\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t// Redraws connected edges\n\tvar s = this.graph.view.scale;\n\t\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar state = states[i][0];\n\t\t\n\t\tif (this.graph.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\tvar points = [];\n\t\t\t\n\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar source = state.visibleSourceState;\n\t\t\tvar target = state.visibleTargetState;\n\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\n\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t{\n\t\t\t\tvar pt0 = pts[0];\n\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\tsource = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t}\n\t\t\t\n\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t{\n\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\ttarget = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t}\n\t\t\t\n\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\tstate.invalid = false;\n\t\t\t\t\t\n\t\t\t// Draws the live preview but avoids update of state\n\t\t\tif (!this.cloning)\n\t\t\t{\n\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.graph.view.validate();\n\tthis.redrawHandles(states);\n\tthis.resetPreviewStates(states);\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces a repaint event if not moved\n\t\t\t\tstate.shape.bounds = null;\n\n\t\t\t\tif (state.text != null && state.text.node != null)\n\t\t\t\t{\n\t\t\t\t\tvar node = state.text.node;\n\t\t\t\t\t\n\t\t\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.firstChild.firstChild.setAttribute('pointer-events', 'all');\n\t\t\t\t\t}\n\t\t\t\t\telse if (node.ownerSVGElement != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.removeAttribute('pointer-events');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.pointerEvents = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of state and connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible)\n{\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\n\t\t\tif (visible)\n\t\t\t{\n\t\t\t\thandler.redraw();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(this.cells, true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx - this.graph.panDx / this.graph.view.scale,\n\t\t\t\tdy - this.graph.panDy / this.graph.view.scale, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\tif (state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\treturn stroke == mxConstants.NONE && fill == mxConstants.NONE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\t\t\t\t\n\t\t\t\t\tif (this.minScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.max(this.minScale, value);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.maxScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.min(this.maxScale, value);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (this.graph.view.scale != value)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.zoomTo(value);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t\t    \tif (this.active)\n\t\t    \t{\n\t\t    \t\tthis.reset();\n\t\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t\t\n\t\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t\t{\n\t\t\t\tthis.currentState = null;\n\t\t\t}\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\tif (this.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell does not allow new connections to be created.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function() { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.positionChanged();\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Called after <setPosition> has been called in <processEvent>. This repaints\n * the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE, mxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells) &&\n\t\tthis.state.width >= 2 && this.state.height >= 2;\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\n\tfunction checkShape(shape)\n\t{\n\t\treturn shape != null && (me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 0;\n\t\n\tif (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state))\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\t// Saves reference to parent state\n\t\tvar model = this.state.view.graph.model;\n\t\tvar parent = model.getParent(this.state.cell);\n\t\t\n\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t{\n\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t}\n\t\t\n\t\t// Creates a preview that can be on top of any HTML label\n\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\n\t\t// Creates the border that represents the new bounds\n\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t{\n\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\n\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t{\n\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Prepares the handles for live preview\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.hideSizers();\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t}\n\t\t\t\n\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\tthis.edgeHandlers = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\n\t\t\t\tif (handler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotateVertex(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.resizeVertex(me);\n\t\t\t}\n\n\t\t\tthis.updateHint(me);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.abs(Math.sqrt(dx * dx + dy * dy) - 20) * 3;\n\t\tvar raster = Math.max(1, 5 * Math.min(3, Math.max(0, Math.round(80 / Math.abs(dist)))));\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.updateLivePreview(me);\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.drawPreview();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Needed to force update of text bounds\n\tthis.state.unscaledWidth = null;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell to the given rotation.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cell);\n\t\t\t\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\t\t\n\t\t\t\tif (style != null)\n\t\t\t\t{\n\t\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tdx = Math.round((this.labelShape.bounds.getCenterX() - this.startX) / scale);\n\t\t\tdy = Math.round((this.labelShape.bounds.getCenterY() - this.startY) / scale);\n\t\t\t\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += dx;\n\t\t\t\tgeo.offset.y += dy;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\tvar s = this.bounds;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[8], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility = (this.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\t// If not destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = pstate;\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\t\n\t\t\t\tif (pstate != null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.bounds;\n\tthis.selectionBorder.redraw();\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Adds highlight for parent group\n\tif (this.parentHighlightEnabled)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\n\t\t\tif (pstate != null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.redraw();\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\tvar minDistSq = null;\n\tvar result = null;\n\n\tfunction checkShape(shape)\n\t{\n\t\tif (shape != null && shape.node.style.display != 'none' && shape.node.style.visibility != 'hidden' &&\n\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t{\n\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\n\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t{\n\t\t\t\tminDistSq = tmp;\n\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t{\n\t\tresult = mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.bends[i]))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t{\n\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && this.graph.isCellLocked(state.cell))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.marker.getValidState() == me.getState()) ?\n\t\t\t\tmxConstants.DEFAULT_VALID_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() && this.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && this.graph.isCellLocked(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.updateHint(me, this.currentPoint);\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\t\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.abspoints = this.state.absolutePoints.slice();\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = g.points;\n\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tif (pts != null)\n\t\t{\n\t\t\tif (this.points == null)\n\t\t\t{\n\t\t\t\tthis.points = [];\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.drawPreview();\n\t\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\tif (this.isLabel)\n\t{\n\t\tvar b = this.labelShape.bounds;\n\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\tthis.labelShape.bounds = bounds;\n\t\tthis.labelShape.redraw();\n\t}\n\telse if (this.shape != null)\n\t{\n\t\tthis.shape.apply(this.state);\n\t\tthis.shape.points = this.abspoints;\n\t\tthis.shape.scale = this.state.view.scale;\n\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\tthis.shape.stroke = this.getSelectionColor();\n\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\tthis.shape.isShadow = false;\n\t\tthis.shape.redraw();\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.points = [];\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.points = this.abspoints;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tthis.destroyBends(this.bends);\n\t\tthis.bends = this.createBends();\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tthis.destroyBends(this.virtualBends);\n\t\tthis.virtualBends = this.createVirtualBends();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tthis.destroyBends(this.customHandles);\n\t\tthis.customHandles = this.createCustomHandles();\n\t}\n\t\n\t// Puts label node on top of bends\n\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t{\n\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t}\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = true;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement a application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>. \n * \n * Actions:\n * \n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n * \n * A list of built-in actions is available in the <addActions> description.\n * \n * Read/write Diagrams:\n * \n * To read a diagram from an XML string, for example from a textfield within the \n * page, the following code is used:\n * \n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n * \n * For reading a diagram from a remote location, use the <open> method.\n * \n * To save diagrams in XML on a server, you can set the <urlPost> variable. \n * This variable will be used in <getUrlPost> to construct a URL for the post \n * request that is issued in the <save> method. The post request contains the \n * XML representation of the diagram as returned by <writeGraphModel> in the \n * xml parameter.\n * \n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n * \n * Here are some examples of processing a post request in various languages.\n * \n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n * \n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n * \n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n * \n * Creating images:\n * \n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n * \n * Special characters:\n * \n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n * \n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n * \n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n * \n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n * \n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n * \n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *   \n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *   \n *   return text;\n * }\n * (end)\n * \n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n * \n * Local Files:\n * \n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n * \n * For example, in PHP the code that does this looks as follows.\n * \n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n * \n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n * \n * Cell Properties:\n * \n * The properties displayed in the properties dialog are the attributes and \n * values of the cell's user object, which is an XML node. The XML node is \n * defined in the templates section of the config file.\n * \n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n * \n * In the following example, the task node is a business object and only the \n * mxCell node and its mxGeometry child contain graph information:\n * \n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task> \n * (end)\n * \n * The idea is that the XML representation is inverse from the in-memory \n * representation: The outer XML node is the user object and the inner node is \n * the cell. This means the user object of the cell is the Task node with no \n * children for the above example:\n * \n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n * \n * The Task node can have any tag name, attributes and child nodes. The \n * <mxCodec> will use the XML hierarchy as the user object, while removing the \n * \"known annotations\", such as the mxCell node. At save-time the cell data \n * will be \"merged\" back into the user object. The user object is only modified \n * via the properties dialog during the lifecycle of the cell.\n * \n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced \n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n * \n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n * \n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n * \n * Popupmenu and Toolbar:\n * \n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n * \n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n * \n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n * \n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n * \n * Ids:\n * \n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n * \n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n * \n * Programmatically inserting cells:\n * \n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n * \n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n * \n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n * \n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n * \n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request. \n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n * \n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n * \n * Event: mxEvent.ADD_VERTEX\n * \n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n * \n * Event: mxEvent.AFTER_ADD_VERTEX\n * \n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n * \n * Example:\n * \n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n * \n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n * \n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.ESCAPE\n * \n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n * \n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n * \n * Parameters:\n * \n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\t\t\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\t\n/**\n * Variable: askZoomResource\n * \n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\t\n/**\n * Variable: lastSavedResource\n * \n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\t\n/**\n * Variable: currentFileResource\n * \n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\t\n/**\n * Variable: propertiesResource\n * \n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\t\n/**\n * Variable: tasksResource\n * \n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\t\n/**\n * Variable: helpResource\n * \n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\t\n/**\n * Variable: outlineResource\n * \n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\t\n/**\n * Variable: outline\n * \n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n * \n * To handle a singleclick, use the following code.\n * \n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n * \n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n * \n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell \n * under the mousepointer, otherwise the cell under the \n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n * \n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n * \n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n * \n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n * \n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n * \n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n * \n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n * \n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n \n/**\n * Variable: cycleAttributeValues\n * \n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n * \n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n * \n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n * \n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n * \n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n * \n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n * \n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\t\n/**\n * Variable: helpHeight\n * \n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n * \n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\t\t\n/**\n * Variable: propertiesHeight\n * \n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\t\t\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into \n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n * \n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n * \n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\t\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\t\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\t\t\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\t\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\t\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\t\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\t\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\t\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\t\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\t\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\t\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\t\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\t\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\t\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\t\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\t\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\t\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\t\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\t\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\t\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\t\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\t\t\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\t\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n * \n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n * \n * Parameters:\n * \n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\t\t\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n * \n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n * \n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n * \n * Binds the specified actionname to the specified function.\n * \n * Parameters:\n * \n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n * \n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n * \n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n * \n * Example:\n * \n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\t\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\t\t\t\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\t\t\t\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n * \n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n * \n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n * \n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\t\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\t\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\t\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\t\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\t\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\t\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\t\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n * \n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\t\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\t\t\t\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn layout;\n\t};\n\t\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n * \n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\t\t\t\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\t\t\n/**\n * Function: installUndoHandler\n * \n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\t\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\t\t\n/**\n * Function: installDrillHandler\n * \n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\t\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n * \n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\t\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\t\t\t\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n * \n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\t\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n * \n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\t\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\t\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n * \n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n * \n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n * \n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\t\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n * \n * Creates the <status> using the specified container.\n * \n * This implementation adds listeners in the editor to \n * display the last saved time and the current filename \n * in the status bar.\n * \n * Parameters:\n * \n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\t\t\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\t\t\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\t\t\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n * \n * Display the specified message in the status bar.\n * \n * Parameters:\n * \n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n * \n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n * \n * Parameters:\n * \n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n * \n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n * \n * Parameters:\n * \n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n * \n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\t\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\t\t\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\t\n\tvar prefix = this.getRootTitle();\n\t\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n * \n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n * \n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n * \n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n * \n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n * \n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n * \n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n * \n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n * \n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n * \n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n * \n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n * \n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\t\t\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\t\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n * \n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n * \n * Example:\n * \n * To replace the diagram with the diagram in the response, use the\n * following code.\n * \n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n * \n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n * \n * Parameters:\n * \n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n * \n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n * \n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n * \n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n * \n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\t\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\t\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\t\t\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\t\t\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n * \n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n * \n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\t\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\t\t\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Adds a field for the cell style\t\t\t\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\t\t\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\t\t\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\t\t\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t\t\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if the graph wants cells to \n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\t\t\n\t\tform.addButtons(okFunction, cancelFunction);\n\t\t\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n * \n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n * \n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n * \n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\t\t\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\t\t\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\t\t\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\t\n\tthis.tasks.setVisible(true);\n};\n\t\t\n/**\n * Function: refreshTasks\n * \n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\t\t\n/**\n * Function: createTasks\n * \n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\t\n/**\n * Function: showHelp\n * \n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\t\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\t\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\t\t\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\t\t\t\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\t\t\n\t\tthis.help = wnd;\n\t}\n\t\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n * \n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\t\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\t\t\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\t\t\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\t\t\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\t\t\t\t\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\t\t\t\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\t\t\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\t\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\t\t\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n * \n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n * \n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n * \n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\t\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\t\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\t\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\t\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n * \n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n * \n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\t\t\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n * \n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\t\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\t\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\t\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\t\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\t\t\n\t\tif (state != null)\n\t\t{\t\t\t\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\t\t\t\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\t\t\t\t\n\t\t\t\tvar tmp = state.x+state.width;\n\t\t\t\t\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = state.y+state.height;\n\t\t\t\t\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\t\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\t\t\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\t\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n * \n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\t\t\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\t\t\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\t\t\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\t\t\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\t\t\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\t\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitely\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_mxgraph@4.0.5@mxgraph/javascript/dist/build.js\n// module id = 9Glu\n// module chunks = 3"],"sourceRoot":""}